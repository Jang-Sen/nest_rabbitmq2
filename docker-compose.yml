services:
  customer:
    container_name: customer_2
    build:
      context: ./customer
      dockerfile: Dockerfile
      target: development
    volumes:
      - ./customer:/usr/src/customer
    env_file:
      - .env
    command: npm run start:dev
    ports:
      - "8010:8000"
    depends_on:
      - database
      - rabbitmq
    networks:
      - networks_2

  product:
    container_name: product_2
    build:
      context: ./product
      dockerfile: Dockerfile
      target: development
    volumes:
      - ./product:/usr/src/product
    env_file:
      - .env
    command: npm run start:dev
    ports:
      - "8020:8000"
    depends_on:
      - database
      - rabbitmq
    networks:
      - networks_2

  order:
    container_name: order_2
    build:
      context: ./order
      dockerfile: Dockerfile
      target: development
    volumes:
      - ./order:/usr/src/order
    env_file:
      - .env
    command: npm run start:dev
    ports:
      - "8030:8000"
    depends_on:
      - database
      - rabbitmq
    networks:
      - networks_2

  database:
    container_name: database_2
    image: postgres:latest
    restart: always
    env_file:
      - .env
    ports:
      - "5434:5432"
    networks:
      - networks_2

  rabbitmq:
    container_name: rabbitmq_2
    image: rabbitmq:3.13.3-management
    env_file:
      - .env
    ports:
      - "15673:15672"
      - "5673:5672"
    networks:
      - networks_2

networks:
  networks_2:
    driver: bridge